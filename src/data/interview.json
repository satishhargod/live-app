[
    {
      "question": "Tell me somthing about your self?",
      "type": "javascript",
      "answer": "<div className='self-intro'> I am Satish Hargod and<br/> I have 5+ years of experience as a Backend developer. And also some decent knowledge in frontend also.<br/> I have knowledge about some technologies like - PHP, Node js, express and React js<br/> I started with PHP! I've worked on PHP approx 1.5 years till! After that I start worked with react and node js projects! But I have more experience in node js profile as compared to react js. Have worked on some databse like sql and mongodb, also have experience in project management tools like jira and asana <ul>Have worked in some domains like, <br/> <li><b>Real time chat:</b> In this project we can communicat one or more user <ul> <li>I have  intigrate WebSocket server This is the most important component of our application; it handles all the communication between clients and rooms</li> In this also work with FCM for Notication an alert (typically a pop-up or other message) generated by an application to notify the user of a new message.</li>  </ul></li><li><b>Ecommerce:</b> have Worked also Ecommerce websites, in that project i haved crating multipule api's for frontend as well as for admin creating multipule modules like customers, admins, products orders, tracking, and admin settings  we have intigrate 3 party api's for fatching products, also use aws s3 bucket for storing images. When we dissucss about database so i am using mongodb database. beacuse this database is very faster and no sql database. </li> <li><b>Blockchain projects:</b> Last 8 month i was working on Blockchain project. in that project i haved crating multipule api's for frontend and i handaled subgraph events that can be call buy blokchains, we have managing data both from api and subgraph as well. we have managed user profile user nonce and signature. also we have intigrate 3 party api's like pinata, infura, also we have implement ethereum and binance Blockchain network in our platform.And we have using s3 bucket for storing images. </li> <li>Okay aprat from this One of my best project. In this project i learned a lot of things. this project name is avea project. In that my role as backend devloper. I have create many api for frontend, like control user roles, fetch products and orders import export,Avea is used for managing the orders placed from different platforms (i.e. Amazon, Walmart, ebay, Groupon and avenue) and also pulling the same. Avea allows for sending the tracking details and to provide various details like How much quantity has been sold, how much ProÔ¨Åt they earned, how much order they have received from different platforms and shipping details We have also use csv packages for import export csv files and we have also intigrate WebSocket.</li> <li>Currently i am working rise project this is my lates one that is no mention in my resume that about me and thank you</li></ul> <br/> </div>"
    },
    {
      "question": "Tell me somthing about your self?",
      "type": "javascript",
      "answer": "<div className='self-intro'>  I am Satish Hargod and<br/> I have 5+ years of experience as a Backend developer. And also some decent knowledge in frontend also.<br/> I have knowledge about some technologies like - Node js, express and React js<br/> I start worked with react and node js projects! But I have more experience in node js profile as compared to react js. Have worked on some databse like sql postgres and mongodb, also have experience in project management tools like jira and asana and For the version control I have used bitbucket, gitlab, GitHub. <br/> <br/> In web development I have worked on various domains like healthcare, Edtech, ecommerce realtime chat applications, I have also worked on rest api's and 3 party api's like shopfiy twilio tracking api <br/> <br/> I have aware on user wallet system we have managed user wallet and user transactions and also worked on push notifications <br/> <br/> If we are discuss about Payment Gateway i have hands on experience on stripe and paypal Payment Gateway  <br/> <br/> Okay aprat from this One of my best project. In this project i learned a lot of things. this project name is avea project. Avea is used for managing the orders placed from different platforms and also pulling the same. We have handles many plateforms like  i.e. Amazon, Walmart, ebay, Groupon and avenue  in single application. in this project i have also intigrated web scoket for processing bar when admin is upload any type of csv file's like orders products and customers. we are managing many feature like genrate pdf and upload and export csv<br/><br/>Currently i am working rise project this is my latest one that is no mention in my resume Rise project is reprsent for health care In this project we are managing for role <br/> admin app user castmamber and health expert <br/> admin can create a feed videos for health tips <br/> health expert create 4 type video 1. seasone episode segment lession <br/> Cast mamber also create for tha same but different is cast mamber allow to login in mobile aap but heath expert is not <br/> App user can see feed video seasone episode lesson and segment we are mentend all type video like comment user watch or not In this app also we have implemented chat and discussion board and notifications <br> it's all about me, Thank's</li></ul> <br/> </div>"
    },
    {
      "question": "Tell me about your last journey?",
      "type": "javascript",
      "answer": "<div className='self-intro'> I joined Dexbytes as an intern, where I learned a lot. Dexbytes allowed me to work with various technologies, including PHP, React.js, and Node.js. I primarily focused on backend development, REST APIs, and third-party APIs. I worked on many projects, but my best project at Dexbytes was Avea. I learned a great deal from this project, where my role was as a full-stack developer working with React and Node.js.</br> After that, I switched companies for career and personal growth. I wanted to experience different work environments and cultures. I joined Thoughtwin IT Solutions as a Senior Developer, where I started working on blockchain projects. My responsibilities included creating Node.js APIs, handling subgraphs, and maintaining transaction history. I completed three projects there before moving to New Rise App, where I worked as a Senior MERN Stack Developer. </br> I then joined eSparkBiz for further personal growth. I led the MaxScaffold project and am currently working on the PetApp project. </div>"
    },
    {
      "question": "Tell me somthing about recent project?",
      "type": "javascript",
      "answer": "<div class='markdown prose w-full break-words dark:prose-invert light'><p><strong>iPoint Pet App</strong> is a powerful Software as a Service (SaaS) platform designed to help animal hospitals manage patients efficiently in one place. In this app, users can create and manage patient profiles. Additionally, pet information, along with medical history, can be added.</p><p>This project includes many modules:</p><ul><li><strong>Patient Contact Details:</strong> Add multiple contacts with locations.</li><li><strong>Treatment Plan Module:</strong> Manage and document treatment plans.</li><li><strong>Task Module:</strong> Organize and track tasks.</li><li><strong>Invoice Generation:</strong> Create invoices efficiently.</li><li><strong>Custom Settings:</strong> Set default values such as country, state, and city, date formats across the app, page limits, and default text.</li></ul><p>The main module in this project is the <strong>Appointment System</strong>, designed to simplify the process of booking and managing appointments for patients.</p><ol><li><p><strong>Booking an Appointment:</strong></p><ul><li>Choose a doctor based on specialty and availability.</li><li>Pick an available time slot from the calendar.</li><li>Enter necessary details and confirm the appointment.</li><li>View all upcoming appointments.</li></ul><p>The appointment module also offers options for recurring events, allowing users to schedule appointments on a daily, weekly, monthly, or yearly basis.</p></li><li><p><strong>Managing Appointments:</strong></p><ul><li>Easily change or cancel appointments if needed.</li><li>Receive automatic reminders before the appointment to avoid missing it.</li></ul></li></ol><p>This module also provides a report facility, enabling users to generate reports according to treatment.</p><hr></div>"
    },   
    {
      "question": "Tell me somthing about recent project?",
      "type": "javascript",
      "answer": "iPoint Pet App is a powerful Software as a Service (SaaS) platform designed to help animal hospitals manage patients efficiently in one place. In this app, users can create and manage patient profiles. Additionally, pet information, along with medical history, can be added.This project includes many modules:Patient Contact Details: Add multiple contacts with locations.Treatment Plan Module: Manage and document treatment plans.Task Module: Organize and track tasks.Invoice Generation: Create invoices efficiently.Custom Settings: Set default values such as country, state, and city, date formats across the app, page limits, and default text.The main module in this project is the Appointment System, designed to simplify the process of booking and managing appointments for patients.Booking an Appointment:Choose a doctor based on specialty and availability.Pick an available time slot from the calendar.Enter necessary details and confirm the appointment.View all upcoming appointments.The appointment module also offers options for recurring events, allowing users to schedule appointments on a daily, weekly, monthly, or yearly basis.Managing Appointments:Easily change or cancel appointments if needed.Receive automatic reminders before the appointment to avoid missing it.This module also provides a report facility, enabling users to generate reports according to treatment."
    }, 
    {
      "question": "Project Challenges",
      "type": "javascript",
      "answer": "<div class='markdown prose w-full break-words dark:prose-invert light'><p>We are facing issues with generating dynamic reports. These reports are created based on dynamic option selections, adding dynamic snippets and text. This causes many design problems, such as spacing issues, page breaks, and content shifts because the client makes too many changes at runtime.</p> <p>Additionally, we have another challenge: the client wants this project to function offline as well. To address this, I worked on the backend for syncing management, and my colleague worked on Electron. In this module, we created APIs for syncing logs according to the user's offline activity. Electron stores all offline activity locally, and when the user comes online, the data is synced with the online database.</p></div>"
    },  
    {
      "question": "http and https difference",
      "type": "javascript",
      "answer": "<div className='self-intro'> HTTPS is HTTP with encryption and verification. The only difference between the two protocols is that HTTPS uses TLS (SSL) to encrypt normal HTTP requests and responses, and to digitally sign those requests and responses. As a result, HTTPS is far more secure than HTTP. </div>"
    }, 
    {
      "question": "AWS(Lambda SQS,SNS)",
      "type": "javascript",
      "answer": "<div className='self-intro'> 1. Elastic Beanstalk in AWS </br> 2. aws lambda services </br> 3. dynamodb aws </br> 4.Simple Storage Service (S3) </br> 5. Load Balancer </br> 6. Simple Queuing Service (SQS) </br> 7. AWS Autoscaling </div>"
    },
    {
      "question": "What is java script?",
      "type": "javascript",
      "answer": "<div >JavaScript is a dynamic programming and scripting language. we can update and change both HTML and CSS. JavaScript can calculate, manipulate and validate data.it's flow ECMA script standard. Using this language we can create multipule type of applications like web application, mobile application, smartwatch apps and gaming etc. JavaScript is now capable of front-end as well as back-end development. <ul> Advantages of JavaScript<br/><li> <b>Speed -: </b> JavaScript is very fister as compare other language</li> <li> <b>Simplicity -: </b> JavaScript is easy to understand and learn. The structure is simple for the users as well as the developers. </li> <li> <b>Popularity -: </b> Since all modern browsers support JavaScript, it is seen almost everywhere. All the famous companies use JavaScript as a tool including Google, Amazon, PayPal, etc.. </li> <li> <b>Server Load -:</b> As JavaScript operates on the client-side, data validation is possible on the browser itself rather than sending it off to the server. In case of any discrepancy, the whole website needs not to be reloaded. </li> <li> <b>Versatility -: </b> JavaScript is now capable of front-end as well as back-end development. Back-end development uses NodeJS while many libraries help in front-end development like AngularJS, ReactJS, etc.. </li></ul> <ul> Disadvantages of JavaScript <li> <b>Client-side Security -: </b> </li><li> <b>Lack of Debugging Facility -: </b> </li><li> <b>Single Inheritance -:</b> JavaScript only supports single inheritance and not multiple inheritance. Some programs may require this object-oriented language characteristic. </li></ul> </div>"
    },
    {
      "question": "What is Class?",
      "type": "javascript",
      "answer": "<div >In JavaScript, a class is a blueprint for creating objects with shared properties and methods. Classes in JavaScript were introduced in ECMAScript 6 (ES6) and provide a syntactical sugar over the existing prototype-based inheritance.</div>"
    },
    {
      "question": "What is the difference between a constructor and a class in JavaScript?",
      "type": "javascript",
      "answer": "<div >A constructor is a function that creates an object, while a class is a blueprint for creating objects. In JavaScript, classes are syntactical sugar over constructor functions.</div>"
    },    
    {
      "question": "What is Inheritance?",
      "type": "javascript",
      "answer": "<div >JavaScript classes support inheritance using the extends keyword. This allows a class to inherit properties and methods from another class.</div>"
    },
    {
      "question": "What is Polymorphism?",
      "type": "javascript",
      "answer": "<div >Polymorphism is one of the core concepts of object-oriented programming languages where poly means many and morphism means transforming one form into another. Polymorphism means the same function with different signatures is called many times. In real life, for example, a boy at the same time may be a student, a class monitor, etc. So a boy can perform different operations at the same time. This is called polymorphism. </div>"
    },
    {
      "question": "What is ECMA Script?",
      "type": "javascript",
      "answer": "<div >ECMAScript is a language. ECMAScript is a specification on JavaScript. JavaScript is an implementation of the ECMAScript standard. ECMAScript is the term for the language standard <ul> <li>ES6 = 2015 jun</li> <li>ES10 Latest</li> </ul> </div>"
    },
    {
      "question": "What is ES6?",
      "type": "javascript",
      "answer": "<div >ES6 stands for ECMAScript 6.</br> ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015. <ul> React uses ES6, and you should be familiar with some of the new features like: <li>Classes</li> <li>Arrow Functions</li> <li>Variables (let, const, var)</li> <li>Array Methods like .map()</li> <li>Destructuring</li><li>Modules</li> <li>Ternary perator</li>  <li>Spread Operator</li> </ul></div>"
    },
    {
      "question": "What is Type Script?",
      "type": "javascript",
      "answer": "<div >TypeScript is a strongly typed, object oriented, compiled language. It's  free and open-source high-level programming language developed by Microsoft. TypeScript always highlights errors at compilation time during the time of development</div>"
    },
    {
      "question": "Type Script Vs JavaScript?",
      "type": "javascript",
      "answer": "<div > TypeScript is an object-oriented programming language developed by Microsoft Corporation, whereas JavaScript is the programming language for the web. TypeScript always highlights errors at compilation time during the time of development, whereas JavaScript points out errors at the runtime. TypeScript takes a long time to compile the code. TypeScript does not support abstract classes.</div>"
    },
    {
      "question": "The typeof Operator?",
      "type": "javascript",
      "answer": "<div ><ul> <li>typeof 'John' // Returns 'string'</li> <li>typeof 3.14 // Returns 'number'</li> <li>typeof NaN // Returns 'number'</li> <li>typeof false // Returns 'boolean'</li> <li>typeof [1,2,3,4] // Returns 'object'</li> <li>typeof {name:'John', age:34} // Returns 'object'</li> <li>typeof new Date() // Returns 'object'</li> <li>typeof function () {} // Returns 'function'</li> <li>typeof myCar // Returns 'undefined' *</li> <li>typeof null // Returns 'object'</li> </ul> </div>"
    },
    {
      "question": "Oprater?",
      "type": "javascript",
      "answer": "<div >JavaScript operators are symbols that are used to perform operations on operands. For example: <ul> <li>Arithmetic Operators</li> <li>Comparison (Relational) Operators</li> <li>Bitwise Operators</li> <li>Logical Operators</li> <li>Assignment Operators</li> <li>Special Operators</li> </ul> </div>"
    },
    {
      "question": "What is anonymous function in javascript?",
      "type": "javascript",
      "answer": "<div > Anonymous function that does not have any name associated with it. Normally we use the function keyword before the function name to define a function in JavaScript, however, in anonymous functions in JavaScript, we use only the function keyword without the function name. <br> Anonymous functions in JavaScript are the functions that do not have any name or identity. Just like, you have a name by which everyone calls you or identifies you. But, the anonymous functions, do not have any name, so we cannot call them like any other function in JavaScript.</div>"
    },
    {
      "question": "What is Immediately Invoked Function Execution?",
      "type": "javascript",
      "answer": "<div > Sometimes, we need to execute a function right after we declare.<br> An IIFE (Immediately Invoked Function Expression) is a JavaScript function that gets invoked immediately. In simple words, it runs as soon as it is defined. It is a way to execute functions immediately, as soon as they are created. </br> (function () { statements })(); </div>"
    },
    {
      "question": "Implicit vs. Explicit Conversion?",
      "type": "javascript",
      "answer": "<div > Implicit - Implicit type conversion is when JavaScript automatically converts a value to a different data type based on the context </br> let num = 42 + true;  // 43 </br> Explicit - explicit convert a value to a specific data type </br> let num = parseInt('42');  // 42</div>"
    },    
    {
      "question": "What is a generator function in javascript?",
      "type": "javascript",
      "answer": "<div >The generator functions are normally built using yield expressions. Each yield inside the generator function is a stopping point before the next execution cycle starts. in javascript we can define generator fucntion with * key word</div>"
    },
    {
      "question": "Explain Null and Undefined in javascript?",
      "type": "javascript",
      "answer": "<div > <ul> <li>Undefined: Undefined means the variable has been declared, but its value has not been assigned..</li> <li>Null: Null in JavaScript means an empty value and is also a primitive data type in JavaScript..</li> </ul> </div>"
    },
    {
      "question": "Explain ReferenceError and Undefined in javascript?",
      "type": "javascript",
      "answer": "<div >An undefined error occurs when we have a variable but not defined. And ReferenceError is thrown when trying to access a previously undeclared variable. </div>"
    },
    {
      "question": "Hosting?",
      "type": "javascript",
      "answer": "<div >Hoisting is the default behaviour of javascript where all the variable and function declarations are moved on top. <strong> note: </strong>let and const variables are hoisted too but they cannot be accessed before their declarations. This is called Temporal Dead Zone.</div>"
    },
    {
      "question": "Difference Between Var, Let, and Const in Javascript?",
      "type": "javascript",
      "answer": "<div ><table><thead><tr><th style='text-align: center;'>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td style='text-align: center;'>var has the function or global scope.</td><td>let's have the block scope.</td><td>const variable has the block scope.</td></tr><tr><td style='text-align: center;'>It gets hoisted to the top of its scope and initialized undefined.</td><td>It also got hoisted to the top of its scope but didn't initialize.</td><td>It also got hoisted to the top of its scope but didn't initialize.</td></tr><tr><td style='text-align: center;'>It can be updated or re-declared.</td><td>It can only be updated and can't be re-declared.</td><td>It can't be updated or re-declared.</td></tr><tr><td style='text-align: center;'>It's an old way to declare a variable.</td><td>It's a new way to declare variables introduced in ES6.</td><td>It's also a new way to declare a variable, which introduces in ES6.</td></tr><tr><td style='text-align: center;'>Can be declared without initialization.</td><td>Can be declared without initialization.</td><td>Cannot be declared without initialization.</td></tr><tr><td style='text-align: center;'>Can be accessed without initialization as its default value is ‚Äúundefined‚Äù.</td><td>Cannot be accessed without initialization, leading to ‚ÄòreferenceError‚Äô.</td><td>Cannot be accessed without initialization, as it cannot be declared without initialization in the first place.</td></tr></tbody></table> <br> https://www.scaler.com/topics/javascript/</div>"
    },
    {
      "question": "What is NaN property in javascript?",
      "type": "javascript",
      "answer": "<div >NaN property represents the ‚ÄúNot-a-Number‚Äù value. To check if a value is NaN, we use the isNaN() function, Note- isNaN() function converts the given value to a Number type, and then equates to NaN.</div>"
    },
    {
      "question": "Explain passed by value and passed by reference?",
      "type": "javascript",
      "answer": "<div >In JavaScript, primitive data types are passed by value and non-primitive data types are passed by reference not a value. <ul><li><b>Primitive data type :</b> String, Number, Boolean, Undefined, Null</li><li><b>Non Primitive data type :</b> Object and Array</li></ul></div>"
    },
    {
      "question": "Explain ‚Äúthis‚Äù keyword?",
      "type": "javascript",
      "answer": "<div > The javascript this keyword refer to the object it belong to. This keyword in javascript always holds the reference to a single object. It's has deffrent value depending on where it is used. <ul> <li>when i use as a alone. so this refer to the globle object </li> <li> when i use in a method.So this refers to the owner objects</li></ul></div>"
    },
    {
      "question": "What is the difference between Node.js and JavaScript?",
      "type": "javascript",
      "answer": "<div >JavaScript is a scripting language whereas Node.js is an engine that provides the runtime environment to run JavaScript code. </br> JavaScript: It is a light-weighted programming language (‚Äúscripting language‚Äù) used to develop interactive web pages. It can insert dynamic text into the HTML elements. JavaScript is also known as the browser‚Äôs language.</br> Node.js: It is used to run JavaScript programs outside the browser and it mostly runs server-side code. It cannot be used to run HTML tags.</div>"
    },
    {
      "question": "JavaScripts method?",
      "type": "javascript",
      "answer": "<div><ul> <li><b>map</b> The map() method creates a new array with the results of calling a function for every array element.</li> <li><b>filter</b> The filter() method returns a new array with all elements that pass the test defined by the given function.</li> <li><b>foreach</b> The forEach() method executes a provided function for each array element.</li> <li><b>reduce</b> The reduce() method executes a reducer function on each element of the array and returns a single output value.</li> <li><b>find</b> The find() method returns the value of the first array element that satisfies the provided test function.</li> <li><b>shift</b> The shift() method removes the first element from an array and returns that element.</li> <li><b>unshift</b> The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.</li> <li><b>reverse</b> The reverse() method returns the array in reverse order.</li> <li><b>sort</b> The sort() method sorts the items of an array in a specific order (ascending or descending).</li> <li><b>slice</b> The slice() method returns a shallow copy of a portion of an array into a new array object.</li> <li><b>splice</b> The splice() method returns an array by changing (adding/removing) its elements in place.</li><li><b>Array pop()</b> - Array pop() Method is used to remove the last element of the array and also returns the removed element. and  If the array is empty, then this function returns undefined.</li> <li>Array push()</li></ul></div>"
    },
    {
      "question": "JavaScripts method?",
      "type": "javascript",
      "answer": "<div><ul> <li>indexOf() returns the position of the first occurrence of a value in a string. The indexOf() method returns -1 if the value is not found. The indexOf() method is case sensitive.</li>  <li>search() searches a string for a value and returns the position of the first match:</li></ul></div>"
    },  
    {
      "question": "JavaScripts array method?",
      "type": "javascript",
      "answer": "<div><ul> <li>[1,2,3].length; //? 3</li> <li>[1,2,3].push(4); //? [1,2,3,4] </li> <li> [1,2,3]. unshift(0); //? [0,1,2,3] *</li> <li>[1,2,3].pop(); //? [1,2] *</li> <li>[1,2,3]. shift(); //? [2,3] *</li> <li>[1,2,3].at(2); //? 3</li> <li>[1,2,3].indexOf(3); //? 2</li> <li>[1,2,3]. includes (3); //? true</li> <li>[1,2,3].map((num) => Math.pow(num, 2)); //? [1, 4, 9]</li> <li>[1,2,3].filter((num) => num % 2); //? [1,3] [1,2,3]. every ((num) => num > 1); //? false [1,2,3]. some ( (num) => num == 3); //? true</li> <li>[1,2,3]. fill(10); //? [10, 10, 10]</li> <li>[1,2,3]. reduce ((acc, num) => acc + num, 0); //? 6 [1,2,3].concat([4,5]); //? [1,2,3,4,5]</li> <li>[1,2,3]. reverse(); //? [3,2,1]</li> <li>[2,1,3].sort(); //? [1,2,3]</li> <li>[1,2,3].join('-'); //? 1-2-3</li> <li>[1,2, [3]]. flat(); //? [1,2,3]</li> <li>[1,2,3]. findIndex ((num) => num === 2); //? 1</li> <li>[1,2,3].find((num, i) => i === 1); //? 2</li> <li>[1,2,3].toString(); //? 1,2,3</li> <li>[1,2,3].slice(1,3); //? [2,3]</li> <li>[1,4].splice(1, 0, 2, 3); //? [1,2,3,4]</li> <li>Array.isArray('[1,2,3]'); //? false </li> <li>Array.from('123'); //? ['1', '2', '3']</li></ul></div>"
    },  
    {
      "question": "About loops?",
      "type": "javascript",
      "answer": "<div><ul> <li><b>for - </b> loops through a block of code a number of times</li>  <li><b>for/in - </b> loops through the properties of an object</li><li><b>for/of - </b> loops through the values of an iterable object</li><li><b>while - </b> loops through a block of code while a specified condition is true</li><li><b>do/while - </b> also loops through a block of code while a specified condition is true</li></ul></div>"
    },
    {
      "question": "Difference between normal funcation and arrow funcation",
      "type": "javascript",
      "answer": "<div><ul><li>Argument object not available in arrow function</li><li>Regular function created using function declaration or expressions, Arrow function we can declar without unsing function key word.</li> <li>we don't use constarction in arraw function</li><li>Arrow function do not have there own this </li><li>Implicitly return by Arrow function.</li> <li>Arrow functions cannot be accessed before initialization </li></ul></div>"
    },
    {
      "question": "Explain call(), apply() and, bind() methods?",
      "type": "javascript",
      "answer": "<div > <ul> <li><b>call(): </b> It‚Äôs a predefined method in javascript. call will call a particular function with the given this.</li> <li><b>apply():</b>The apply method is similar to the call() method. The only difference is that, call() method takes arguments separately whereas, apply() method takes arguments as an array.</li> <li><b>bind():</b> bind will attact given this keyword with function and return a new function..</li> </ul> </div>"
    },
    {
      "question": "What a callback function?",
      "type": "javascript",
      "answer": "<div > A callback function is a when passed a function as an argument to another function with an intention to be called at a later time. that is callback. This is commonly seen in asynchronous APIs; the API call returns immediately because it is asynchronous, so you pass a function into it that the API can call when it's done performing its asynchronous task.</br>  The simplest example I can think of in JavaScript is the setTimeout() function. It's a global function that accepts two arguments. The first argument is the callback function and the second argument is a delay in milliseconds. The function is designed to wait the appropriate amount of time, then invoke your callback function.</br>  But when working with a lot of dependent asynchronous operations with callback, you quickly end up in callback hell.</div>"
    },
    {
      "question": "What is a spread operator?",
      "type": "javascript",
      "answer": "The spread operator is commonly used to make copies of JS objects. we can copy with two types. Deep copy and shallow copy. A deep copy means we can copy nested objects. But in shallow copy means we can copy only single object. Using this operator makes the code concise and enhance its readability."
    },
    {
      "question": "What is Deep copy and shallow copy?",
      "type": "javascript",
      "answer": "<ul ><li class='' ><strong>Shallow copy: </strong>means that <strong >only the first level of he object is copied</strong>. Deeper levels are referenced. A shallow copy can be achieved using the spread operator (‚Ä¶) or using Object.assign():</li><li ><strong >Deep copy: </strong>means that <strong>all levels of the object are copied</strong>. This is a true copy of the object. A deep copy can be achieved using JSON.parse() + JSON.stringify():</li></ul>"
    },
    {
      "question": "JavaScript RangeError: Maximum Call Stack Size Exceeded?",
      "type": "javascript",
      "answer": "<ul ><li class='' ><The JavaScript RangeError: Maximum call stack size exceeded happens when a function keeps calling itself without any condition </li></ul>"
    },   
    {
      "question": "What is a callback hall?",
      "type": "javascript",
      "answer": "<div>When we pass pass callback inside callback inside another callback and so on, it is known as callback hell.</div>"
    },
    {
      "question": "What is a closures?",
      "type": "javascript",
      "answer": "<div>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner function.</div>"
    },
    {
      "question": "What is a currying?",
      "type": "javascript",
      "answer": "<div>Currying in JavaScript is a process in functional programming in which you can transform a function with multiple arguments into a sequence of nesting functions. It returns a new function that expects the next argument inline.  </div>"
    },
    {
      "question": "What is the definition of a Higher-Order Function?",
      "type": "javascript",
      "answer": "<div>  A higher order function is a function that takes a function as an argument, or returns a function.</br>  map, filter, foreach, and reduce all funcation is  Highr order funcation example </div>"
    },
    {
      "question": "What is async/await?",
      "type": "javascript",
      "answer": "<div >In the javascript, the async / await is syntactic sugar for promises.</br> If a function returns a Promise, you can place the await keyword in front of the function call. The await keyword can be used only inside the async functions.</div>"
    },
    {
      "question": "what is meaning of async keyword in javascript?",
      "type": "javascript",
      "answer": "<div > In JavaScript, async is a keyword placed before a function to allow the function to return a promise. Since JavaScript is a synchronous language, Async functions let us write promise-based code as if it were synchronous, but without blocking the execution thread that allows the code to run asynchronously. </div>"
    },
    {
      "question": "What is Promises?",
      "type": "javascript",
      "answer": "<div >A promise is essentially an improvement of callbacks that manage all asynchronous data activities. A JavaScript promise represents an activity that will either be resolve or reject. If the promise is fulfilled, it is resolved; otherwise, it is rejected. initially it will have pending state and after that it will go into rejcted and resolved state. We can handle promise with then catch or async await</div>"
    },
    {
      "question": "Diffrence between promisses and async/await?",
      "type": "javascript",
      "answer": "<div > In async await code is more readable, code becomes messy when using multiple nested then catch in async await if we are handling multiple promises we can just have to use single catch statement but in .then.catch we have to use .catch multiple times in async await if we are handling multiple promises we only have to write await keyword again but in .then.catch we have to create new then catch </div>"
    },
    {
      "question": "Why use async/await?",
      "type": "javascript",
      "answer": "<div > When we have need to handle asynchronous operations so basically we can use callback functions and promise and async await </br> Callback functions aren‚Äôt bad It's better but when we need to  handle multipule asynchronous operations so we have need to use multiple callback functions so it's  quickly enter on callback hell. </br> And same case when we use promises so we have need multiple then catch for handling promises. </br>  code becomes messy when using callback functions and promises as compare to async await </br> the async / await is syntactic sugar for promises.</br> If a function returns a Promise, we can place the await keyword in front of the function call. The await keyword can be used only inside the async functions. </div>"
    },
    {
      "question": "What is synchronous and asynchronous?",
      "type": "javascript",
      "answer": "<div > Synchronous means we can execute one after another<br /> Asynchronous means we can run mutiple task parallely <br /> Synchronous: These API functions are used for blocking code. <br /> Asynchronous: These API functions are used for non-blocking code.</div>"
    },
    {
      "question": "What is Node.js? Where can you use it?",
      "type": "node",
      "answer": "Node.js is written in C, C++, and JavaScript. it's a single-threaded, open-source, cross-platform runtime environment for building fast and scalable server-side and networking applications. It runs on the V8 JavaScript runtime engine, and it uses event-driven, non-blocking I/O architecture, which makes it efficient and suitable for real-time applications."
    },
    {
      "question": "Why use Node.js?",
      "type": "node",
      "answer": "<div><ul> <li>It is generally fast</li><li>Everything is asynchronous </li><li>More then 50000+ libraries availables</li> <li>perform non-blocking I/O operations.</li></ul></div>"
    },
    {
      "question": "How does Node.js work?",
      "type": "node",
      "answer": "<div className='node-answer'><img src={importImg} width={'1000px'} height={'400px'} /></div>"
    },
    {
      "question": "Why is Node.js Single-threaded?",
      "type": "node",
      "answer": "<div> Beacouse that it run on Google v8 engine. And Google v8 engine is Single threaded </div>"
    },
    {
      "question": "Why does Google use the V8 engine for Node.js??",
      "type": "node",
      "answer": "<div> The V8 engine is an open-source JavaScript engine developed by Google that is written in C++. </div>"
    },
    {
      "question": "If Node.js is single-threaded, then how does it handle concurrency?",
      "type": "node",
      "answer": " <div className='node-answer'> Node.js internally uses libuv library for handling all async call. This library creates multiple thread pools to handle async operations. </div>"
    },
    {
      "question": "How is Node.js most frequently used?",
      "type": "node",
      "answer": "<div >Node.js is widely used in the following applications:<ul><li>Real-timechats</li><li>InternetofThings</li><li>ComplexSPAs(Single-PageApplications)</li><li>Real-timecollaborationtools</li><li>Streamingapplications</li><li>Microservicesarchitecture</li></ul></div>"
    },
    {
      "question": "Explain the difference between frontend and backend development?",
      "type": "node",
      "answer": "<div className='node-answer'> <table className='table-data'>        <tr className='table-head'>            <td>Front-end</td>            <td>Back-end</td>        </tr>        <tr>            <td>Frontend refers to the client-side of an application</td>            <td>Backend refers to the server-side of an application</td>        </tr>        <tr>            <td>It is the part of a web application that users can see and interact with</td>            <td>It constitutes everything that happens behind the scenes</td>        </tr>        <tr>            <td>It typically includes everything that attributes to the visual aspects of a web application</td>            <td>It generally includes a web server that communicates with a database to serve requests</td>        </tr>        <tr>            <td>HTML, CSS, JavaScript, AngularJS, and ReactJS are some of the essentials of frontend development</td>            <td>Java, PHP, Python, and Node.js are some of the backend development technologies</td>        </tr>    </table></div>"
    },
    {
      "question": "What is NPM?",
      "type": "node",
      "answer": "NPM is Node Package Manager for install and unistall any package."
    },
    {
      "question": "What are the modules in Node.js?",
      "type": "node",
      "answer": " <div className='node-answer'>  Node.js has many modules to provide the basic functionality needed for a web application. Some of them include:<ul> <li><b>HTTP - </b>Includes classes, methods, and events to create a Node.js HTTP server </li>                            <li><b>util - </b>Includes utility functions useful for developers</li>                            <li><b>fs - </b> Includes events, classes, and methods to deal with file I/O operations</li>                            <li><b>url - </b> Includes methods for URL parsing</li>                            <li><b>query string -</b> Includes methods to work with query string</li>                            <li><b>stream -</b> Includes methods to handle streaming data</li>                        </ul>                    </div>"
    },     
    {
      "question": "What is fs module in Node.js?",
      "type": "node",
      "answer": " <div className='node-answer'>  <ul><li> fs.exists() method to Check that the directory exists or not</li> <li> fs.mkdir for create directory</li> <li> fs.mkdir for create directory</li> </ul> </div>"
    },
    {
      "question": "What is differences between module.exports and exports:?",
      "type": "node",
      "answer": " <div className='node-answer'>  <table> <thead> <tr> <th> <p style='text-align:center'>S.no</p> </th> <th> <p style='text-align:center'>Module.exports</p> </th> <th> <p style='text-align:center'>Exports</p> </th> </tr> </thead> <tbody> <tr> <td> <p style='text-align:center'>1</p> </td> <td>When we want to export a single class/variable/function from one module to another module, we use the <i>module.exports</i> way.</td> <td>When we want to export multiple variables/functions from one module to another, we use <i>exports</i> way.</td> </tr> <tr> <td> <p style='text-align:center'>2.</p> </td> <td>It is the object reference that gets returned from the require() calls.</td> <td><i>exports</i> is not returned by require(). &nbsp;It is just a reference to <i>module.exports</i>.</td> </tr> </tbody> </table> </div>"
    },
    {
      "question": "Difference Between Local Storage, Session Storage, And Cookies?",
      "type": "node",
      "answer": " <div className='node-answer'> <table> <thead> <tr> <th style='width: 233.333px;'><span>Local Storage</span></th> <th style='width: 233.333px;'><span>&nbsp;Session Storage</span></th> <th style='width: 233.333px;'><span>Cookies&nbsp;</span></th> </tr> </thead> <tbody> <tr> <td style='width: 233.333px;'><span>The storage capacity of local storage is 5MB/10MB</span></td> <td style='width: 233.333px;'><span>The storage capacity of session storage is 5MB</span></td> <td style='width: 233.333px;'><span>The storage capacity of Cookies is 4KB</span></td> </tr> <tr> <td style='width: 233.333px;'><span>As it is not session-based, it must be deleted via javascript or manually</span></td> <td style='width: 233.333px;'><span>It‚Äôs session-based and works per window or tab. This means that data is stored only for the duration of a session, i.e., until the browser (or tab) is closed</span></td> <td style='width: 233.333px;'><span>Cookies expire based on the setting and working per tab and window&nbsp;</span></td> </tr> <tr> <td style='width: 233.333px;'><span>The client &nbsp;can read and write local storage</span></td> <td style='width: 233.333px;'><span>The client can read and write local storage</span></td> <td style='width: 233.333px;'><span>Both clients and servers can read and write the cookies</span></td> </tr> <tr> <td style='width: 233.333px;'><span>There is no transfer of data to the server</span></td> <td style='width: 233.333px;'><span>There is no transfer of data to the server</span></td> <td style='width: 233.333px;'><span>Data transfer to the server is exist</span></td> </tr> <tr> <td style='width: 233.333px;'><span>Supported by all browsers, including older ones.</span></td> <td style='width: 233.333px;'><span>Supported by all browsers, including older ones</span></td> <td style='width: 233.333px;'><span>It is supported by all the browser including older browser</span></td> </tr> </tbody> </table> </div>"
    },
    {
      "question": "Why is Node.js preferred over other backend technologies like Java and PHP?",
      "type": "node",
      "answer": "<div className='node-answer'> Some of the reasons why Node.js is preferred include:                        <ul>                            <li>Node.js is very fast</li>                            <li>Node Package Manager has over 50,000 bundles available at the developer‚Äôs disposal</li>                            <li>Perfect for data-intensive, real-time web applications, as Node.js never waits for an API to return data</li>                            <li>Better synchronization of code between server and client due to same code base</li>                            <li>Easy for web developers to start using Node.js in their projects as it is a JavaScript library</li>                        </ul>                    </div>"
    },
    {
      "question": "What is the difference between Angular and Node.js?",
      "type": "node",
      "answer": "<div className='node-answer'>                        <table className='table-data'>                            <tr className='table-head'>                                <td>Angular</td>                                <td>Node Js</td>                            </tr>                            <tr>                                <td>It is a frontend development framework</td>                                <td>It is a server-side environment</td>                            </tr>                            <tr>                                <td>It is written in TypeScript</td>                                <td>It is written in C, C++ languages</td>                            </tr>                            <tr>                                <td>Used for building single-page, client-side web applications</td>                                <td>Used for building fast and scalable server-side networking applications</td>                            </tr>                            <tr>                                <td>Splits a web application into MVC components</td>                                <td>Generates database queries</td>                            </tr>                        </table>                    </div>"
    },
    {
      "question": "What is cors and body parser in node js?",
      "type": "node",
      "answer": "<div className='node-answer'> <ul>Cors - <li> CORS (Cross-Origin Resource Sharing) is a browser security feature that restricts cross-origin HTTP requests with other servers and specifies which domains access your resources. <br> Like If you want to access any resource in domain A to domain B. So, you can not directly access it, if you are sent the request on browser. </br></li></br>const cors = require('cors');</br>app.use(cors({</br>origin: 'https://www.section.io' // origin: ['https://www.section.io', 'https://www.google.com/']</br>}));</br></ul> <ul>Body-parser -  <li> Body-parser is the Node.js body-parsing middleware. It is responsible for parsing the incoming request bodies in a middleware before you handle it.  </li></ul></div>"
    },
    {
      "question": "What are some of the most commonly used libraries in Node.js?",
      "type": "node",
      "answer": " <div className='node-answer'> There are two commonly used libraries in Node.js:                        <ul>                            <li><b>ExpressJS -</b> Express is a flexible Node.js web application framework that provides a wide set of features to develop web and mobile applications.</li>                            <li><b>Mongoose -</b> Mongoose is also a Node.js web application framework that makes it easy to connect an application to a database.</li>                        </ul>                    </div>"
    },
    {
      "question": "What is the command used to import external libraries?",
      "type": "node",
      "answer": " <div className='node-answer'> The ‚Äúrequire‚Äù command is used for importing external libraries. For example - ‚Äúvar http=require (‚ÄúHTTP‚Äù).‚Äù  This will load the HTTP library and the single exported object through the HTTP variable.                    </div>"
    },
    {
      "question": "What does event-driven programming mean?",
      "type": "node",
      "answer": "<div className='node-answer'> Node.js uses an event-driven architecture to handle asynchronous I/O operations. As we now node js is a single threads means code execute one by one but with the help of even driven architecture we can achieve   asynchronous I/O operations. Basically Node.js allows us to create and handle custom events easily by using events module. Event module includes EventEmitter class which can be used to raise and handle custom events. <br> <br> There are two types of objects: event emitters and event listeners. Event emitters trigger events, while event listeners listen and react to those events..<br>.</li></ul></div>"
    },
    {
      "question": "Event and Event Emiter node js?",
      "type": "node",
      "answer": "<div> Node.js allows us to create and handle custom events easily by using events module. Event module includes EventEmitter class which can be used to raise and handle custom events. </div>"
    },
    {
      "question": "What is a event listeners?",
      "type": "node",
      "answer": "<div >An event listener is a procedure in JavaScript that waits for an event to occur. A simple example of an event is a user clicking the mouse or pressing a key on the keyboard. </br> </br>  The <b>addEventListener()</b> is an inbuilt function in JavaScript which takes the event to listen for, and a second argument to be called whenever the described event gets fired. Any number of event handlers can be added to a single element without overwriting existing event handlers. </br> </br> <b>Syntax: </b> element.addEventListener(event, listener, useCapture); </br></br> <b>Parameters :</b> <ul> <li> event: event can be any valid JavaScript event. Events are used without ‚Äúon‚Äù prefixes like using ‚Äúclick‚Äù instead of ‚Äúonclick‚Äù or ‚Äúmousedown‚Äù instead of ‚Äúonmousedown‚Äù. </li> <li>listener(handler function) : It can be a JavaScript function that respond to the event occurring. </li> <li> useCapture: It is an optional parameter used to control event propagation. A boolean value is passed where ‚Äútrue‚Äù denotes capturing phase and ‚Äúfalse‚Äù denotes the bubbling phase. </li> </ul> </div>"
    },
    {
      "question": "What is an Event Loop in Node.js?",
      "type": "node",
      "answer": " <div className='node-answer'>The event loop is the secret behind of JavaScript‚Äôs asynchronous programming. javascript executes all operations on a single thread, but using a few smart data structures, it gives us the illusion of multi-threading. </br> If we are discuss how it works in node js. So node js us the concept of Libuv, Libuv is a espesial library build for node js but we can use application as well it's provide a concept of non blooking i/o now it's build in c++ language </br> </br> If we are discuss about how  event loop works. so basicaly event loop monitaring callstack and callback queue </br> When i execute my code and any function firstly code store on call stack and all synchronous operations run one by one and asynchronous operations move on the web api with desired time when time completed after that promises and settimeout  move on the callback queue, If the Call Stack is empty, the Event Loop will take the task first from  micro task queue then from the macro queue  of callback queue. </br></br> microTasks: process.nextTick, Promises, queueMicrotask, MutationObserver</br>  macroTasks: setTimeout, setInterval, setImmediate, requestAnimationFrame, I/O, UI rendering  </div>"
    },
    {
      "question": "Difference between setImmediate() and process.nextTick() methods?",
      "type": "node",
      "answer": "<div className='node-answer'> process.nextTick() fires immediately as compare to setImmediate() beacuse when the excute event loop all asynchronous opration move on the api queue and event loop excute first micro task and after that macro task and process.nextTick is micro task and setImmediate is macro task</div>"
    },  
    {
      "question": "what is the difference between microtasks and macroTasks?",
      "type": "node",
      "answer": "<div className='node-answer'>  A macro task is a collection of distinct and independent tasks. Microtasks are minor tasks that update the state of an application and should be completed before the browser moves on to other activities, such as re-rendering the user interface. Promise callbacks and DOM modification changes are examples of microtasks.</div>"
    },     
    {
      "question": "What is the package.json file?",
      "type": "node",
      "answer": "<div className='node-answer'> The package.json file holds the metadata for a particular project. The package.json file is found in the root directory of any Node application. It contains information such as name, description, author, script, and dependencies. </div>"
    },
    {
      "question": "What is the package-lock.json file?",
      "type": "node",
      "answer": "<div className='node-answer'> The package-lock.json is a lockfile that holds information on the dependencies or packages installed for a node.js project, including their exact version numbers. </div>"
    },
    {
      "question": "What is the Express package?",
      "type": "node",
      "answer": "<div>Express is free and open-source software under the MIT License. It's flexible Node.js web application framework that provides a wide set of features to develop both web and mobile applications and we can create RESTful APIs with Node.js,</div>"
    },
    {
      "question": "What is the nodemon?",
      "type": "node",
      "answer": "<div>nodemon is a tool that helps develop Node.js based applications by automatically restarting</div>"
    },
    {
      "question": "What is the morgan?",
      "type": "node",
      "answer": "<div>Morgan is an HTTP request level Middleware. It is a great tool that logs the requests along with some other information depending upon its configuration and the preset used. It proves to be very helpful while debugging and also if you want to create Log files.</div>"
    },
    {
      "question": "How to change Node console font color?",
      "type": "node",
      "answer": "<div>Changing color using chalk module</div>"
    },
    {
      "question": "What is difference between dependencies and devdependencies?",
      "type": "node",
      "answer": "<div>`dependencies` : Packages required by your application in production. `devDependencies` : Packages that are only needed for local development and testing.</div>"
    },
    {
      "question": "What is a cluster in Node.js?",
      "type": "node",
      "answer": "<div class=''> Node.js is a single-threaded machine that uses javascript as its scripting language. Due to a single thread in node.js, it handles memory more efficiently because there are no multiple threads due to which no thread management is needed. Now to handle workload efficiently and to take advantage of computer multi-core systems, cluster modules are created that provide us the way to make child processes that run simultaneously with a single parent process. Each child process (more specifically worker process) has its own event loop, memory, V8 instance, and shares the same server port.  <ul> <li><strong>fork()</strong>: This creates a new child process from master.</li> <li><strong>isMaster</strong>: This returns true if current process is master or else false.</li> <li><strong>isWorker</strong>: This returns true if current process is worker or else false.</li> <li><strong>process</strong> : This returns the child process which is global.</li> <li><strong>send()</strong>: This sends a message from worker to master or vice versa.</li> <li><strong>kill()</strong>: This is use to kill the current worker.</li> <li><strong>isDead</strong>: This returns true if current worker is dead or else false.</li> <li><strong>id</strong>: This is a unique id for worker.</li> <li><strong>settings</strong>: This returns an object containing cluster settings.</li> <li><strong>worker</strong>: This returns the current worker process.</li> <li><strong>workers</strong>: This returns all the workers of a process.</li> <li><strong>isConnected</strong>: This returns true if a current worker is connected to its master or else false.</li> <li><strong>disconnect()</strong>: This is to disconnect all workers.</li> </ul></div>"
    },
    {
      "question": "How would you enhance Node.js performance?",
      "type": "node",
      "answer": "<div class=''> Node.js applications do not use multiple core systems. Instead, they run on a single processor. In Node.js, the cluster mode helps startup multiple node.js processes, thus having multiple instances of the event loop.  When you use a cluster in a Node.js app behind the scenes, there are numerous node.js processes created, but there is also a parent process called the cluster manager. A cluster manager monitors the health of the individual instances of the application.</li> </ul></div>"
    },
    {
      "question": "What is fork in Node.js?",
      "type": "node",
      "answer": "<div class=''> Fork is a method in Node.js that is used to create child processes. It helps to handle the increasing workload. It creates a new instance of the engine which enables multiple processes to run the code.</div>"
    },
    {
      "question": "What is child process?",
      "type": "node",
      "answer": "<div class=''> <p>Usually, Node.js allows single-threaded, non-blocking performance but running a single thread in a CPU cannot handle, Node.js comes with a<strong>&nbsp;child process</strong> module, which helps to run other processes in the current environment i.e. it can be used to communicate with other processes.&nbsp;</p><p>Let‚Äôs understand this with an example.&nbsp;</p><p>App1: &nbsp;</p><ul><li>Create a new file exec.js and import child_process module.&nbsp;</li><li>const cp = require(‚Äúchild_process‚Äù);&nbsp;</li><li>The child process has a method exec to open another process.&nbsp;</li><li>cp.exec(‚Äúopen <a href='http://www.google.com/' rel='nofollow'  arget='_blank'>http://www.google.com</a>‚Äù);&nbsp;</li><li>run node exec&nbsp;</li><li>And observe that google page is opened.&nbsp;</li><li>Imagine if we invoke a process that returns data then we can grab that data as well.&nbsp;</li></ul><pre class='nitro-offscreen'>cp.exec(‚Äúls‚Äù, (err, data) =&gt; {&nbsp;  &nbsp;if (err) { throw err; }&nbsp;    Console.log(data);&nbsp;    }); </pre> Four type of child process - spawn(), fork(), exec(),  execFile() </div>"
    },
    {
      "question": "What is the difference between spawn() and fork() method?",
      "type": "node",
      "answer": "<div class=''> Both these methods are used to create new child processes the only difference between them is that spawn() method creates a new function that Node runs from the command line whereas fork() function creates an instance of the existing fork() method and creates multiple workers to perform on the same task. </div>"
    },
    {
      "question": "What is assert/assertion method?",
      "type": "node",
      "answer": "<div> assert() Function. The assert module provides a set of assertion functions for verifying invariants. In assert() function, if the value is not truth, then a AssertionError is thrown with a message property set equal to the value of the message parameter.</br></br><table class=''> <tbody><tr> <th>Method</th> <th>Description</th> </tr> <tr> <td><a href='met_assert.asp'>assert()</a></td> <td>Checks if a value is true. Same as assert.ok()</td> </tr> <tr> <td><a href='met_assert_deepequal.asp'>deepEqual()</a></td> <td>Checks if two values are equal</td> </tr> <tr> <td><a href='met_assert_deepstrictequal.asp'>deepStrictEqual()</a></td> <td>Checks if two values are equal, using the strict equal operator (===)</td> </tr> <tr> <td>doesNotThrow()</td> <td>&nbsp;</td> </tr> <tr> <td><a href='met_assert_equal.asp'>equal()</a></td> <td>Checks if two values are equal, using the equal operator (==)</td> </tr> <tr> <td>fail()</td> <td>Throws an Assertion Error</td> </tr> <tr> <td>ifError()</td> <td>Throws a specified error if the specified error evaluates to true</td> </tr> <tr> <td><a href='met_assert_notdeepequal.asp'>notDeepEqual()</a></td> <td>Checks if two values are not equal</td> </tr> <tr> <td><a href='met_assert_notdeepstrictequal.asp'>notDeepStrictEqual()</a></td> <td>Checks if two values are not equal, using the strict not equal operator (!==)</td> </tr> <tr> <td><a href='met_assert_notequal.asp'>notEqual()</a></td> <td>Checks if two values are not equal, using the not equal operator (!=)</td> </tr> <tr> <td><a href='met_assert_notstrictequal.asp'>notStrictEqual()</a></td> <td>Checks if two values are not equal, using the strict not equal operator (!==)</td> </tr> <tr> <td><a href='met_assert_ok.asp'>ok()</a></td> <td>Checks if a value is true</td> </tr> <tr> <td><a href='met_assert_strictequal.asp'>strictEqual()</a></td> <td>Checks if two values are equal, using the strict equal operator (===)</td> </tr> <tr> <td>throws()</td> <td>&nbsp;</td> </tr> </tbody></table></div>"
    },
    {
      "question": "What are streams in Node.js?",
      "type": "node",
      "answer": " <div className='node-answer'>Streams are objects that enable you to read data or write data continuously and listening to music or watching video in ‚Äòreal time‚Äô, instead of downloading a file to your computer and watching it later.. </br></br>There are four types of streams: <ul><li>Readable ‚Äì Used for reading operations</li><li>Writable ‚àí Used for write operations</li><li>Duplex ‚àí Can be used for both reading and write operations</li><li>Transform ‚àí A type of duplex stream where the output is computed based on input</li></ul> <ul> <b>readFile : -</b> <li> It reads the file into the memory before making it available to the user.</li> <li>It is slower due to read of whole file.</li> <li>Due to its property, it is easier for nodejs to handle cleaning of memory in this case.</li></ul> <ul><b>createReadStream : -</b><li> It reads the file in chunks according to a need by the user.</li> <li> It reads the file in chunks according to a need by the user.</li><li>It is faster due to its property of bringing in chunks.</li><li>In this case memory cleaning by nodejs is not easy.</li></ul> </br></br>Each type of Stream is an EventEmitter instance and throws several events at</br></br> different instance of times. For example, some of the commonly used events are ‚Äî <li>data ~ This event is fired when there is data is available to read.</li> <li>end ~ This event is fired when there is no more data to read,</li> <li>error ~ This event is fired when there is any error receiving or writing data</li> <li>finish ~ This event is fired when all the data has been flushed to underlying system</li> </div>"
    },
    {
      "question": "How do you install, update, and delete a dependency?",
      "type": "node",
      "answer": "<div className='node-answer'> <ul> <li>install - npm install package-name</li> <li>update - npm update</li> <li>delete - npm unstall package-name</li> </ul> </div>"
    },
    {
      "question": "How do you create a simple server in Node.js that returns Hello World?",
      "type": "node",
      "answer": "<div > <ul> <li>Import the HTTP module</li> <li>Use createServer function with a callback function using request and response as parameters.</li> <li>Type ‚Äúhello world.‚Äú </li> <li>Set the server to listen to port 8080 and assign an IP address</li> </ul> </div>"
    },
    {
      "question": "How do you create a simple server in Node.js that returns Hello World?",
      "type": "node",
      "answer": "<div> const express = require('express')</br>const bodyParser = require('body-parser');</br>  const cors = require('cors');</br> const app = express();</br>const port = 3000;</br>// Where we will keep books</br>let books = [];</br> app.use(cors());</br>// Configuring body parser middleware</br>app.use(bodyParser.urlencoded({ extended: false }));</br>app.use(bodyParser.json());</br>app.post('/book', (req, res) => {</br>// We will be coding here</br>});</br>app.listen(port, () => console.log(`Hello world \napp listening on port ${port}!`)); </div>"
    },
    {
      "question": "What is REPL in Node.js?",
      "type": "node",
      "answer": "<div className='node-answer'>  REPL stands for Read Evaluate Print Loop, and it is a programming language environment (basically a console window) that takes single expression as user input and returns the result back to the console after execution.  </div>"
    },
    {
      "question": "What is the buffer class in Node.js?",
      "type": "node",
      "answer": "<div>The buffers module provides a way of handling streams of binary data. The Buffer object is a global object in Node. js, and it is not necessary to import it using the require keyword.</div>"
    },
    {
      "question": "What is String Decoder?",
      "type": "node",
      "answer": "<div>NodeJS StringDecoder is used to decode the buffer data into a string. Buffer is used to storing the streams of binary data, since this binary data can only understandable by a computer, it is required to convert it into a string so that humans can read it. </br> </br>There is a method buffer.toString() provided by the buffer class which is also used to convert the buffer data into a string, the difference is that StringDecoder provides extra support for UTF encoding. </div>"
    },
    
    {
      "question": "Explain the concept of middleware in Node.js?",
      "type": "node",
      "answer": "<div className='node-answer'>Middleware is the function that works between the request and the response cycle. Middleware gets executed after the server receives the request and before the controller sends the response.</div>"
    },
    {
      "question": "List the various Node.js timing features?",
      "type": "node",
      "answer": "<div className='node-answer'> It includes setTimeout(), setImmediate(), and setInterval() methods. </br></br> 1. <b>setTimeout()</b> Method:<ul>  Syntax: </br></br>setTimeout(callback, delay, args )</br><li><strong>callback:</strong> This parameter holds the function that to be executed.</li><li><strong>delay:</strong> This parameter holds the number of milliseconds to wait before calling the callback function.</li><li><strong>args:</strong> This parameter holds the optional parameter.</li></ul> </br></br> 2. <b>setImmediate()</b> Method:<ul>  Syntax: </br></br>setImmediate(callback, args)</br><li><strong>callback:</strong> This parameter holds the function to call at the end of this turn of the Node.js Event Loop.</li><li><strong>args:</strong> This parameter holds the optional arguments for the function.</li></ul></br></br> 3. <b>setInterval()</b> Method:<ul>  Syntax: </br></br>setInterval(callback, delay, args)</br><li><strong>callback:</strong> This parameter holds the function that to be called when the timer elapse.</li><li><strong>delay:</strong> This parameter holds the number of milliseconds to wait before calling the vallback function.</li><li><strong>args:</strong> This parameter holds the optional arguments for the function.</li></ul></div>"
    },
    {
      "question": "What is the purpose of __filename variable?",
      "type": "node",
      "answer": " <div className='node-answer'> The __filename represents the filename of the code being executed.</div>"
    },
    {
      "question": "What is the purpose of __dirname variable?",
      "type": "node",
      "answer": " <div className='node-answer'>__dirname is an environment variable that tells you the absolute path of the directory containing the currently executing file.</div>"
    },
    {
      "question": "Difference between authentication and authorization?",
      "type": "node",
      "answer": "<div>authentication is the process of verifying who someone is, whereas authorization is the process of verifying what specific applications, files, and data a user has access to.   <ul><li><b>Authentication</b> Employees in a company are required to authenticate through the network before accessing their company email.</li> <li><b>Authorization</b> After an employee successfully authenticates, the system determines what information the employees are allowed to access. </li></ul></div>"
    },
    {
      "question": "How to validate data in Node.js?",
      "type": "node",
      "answer": "<div>Validation in node.js can be easily done by using the express-validator module. This module is popular for data validation. There are other modules available in the market like hapi/joi, etc but express-validator is widely used and popular among them. </div>"
    },
    {
      "question": "What is ORM?",
      "type": "node",
      "answer": "<div className='node-answer'>ORM is the process of mapping between objects and relational database systems. </div>"
    },
    {
      "question": "How would you connect a MongoDB database to Node.js?",
      "type": "node",
      "answer": "<div>const mongoose = require('mongoose'); </br> mongoose.connect(url, options); </div>"
    },
    {
      "question": "Which database is more popularly used with Node.js?",
      "type": "node",
      "answer": "<div className='node-answer'> MongoDB is the most common database used with Node.js. It is a NoSQL, cross-platform, document-oriented database that provides high performance, high availability, and easy scalability.    </div>"
    },
    {
      "question": "What is Debugger?",
      "type": "node",
      "answer": ""
    },
    {
      "question": "What is Crypto?",
      "type": "node",
      "answer": "<div>Crypto is a module in Node. js which deals with an algorithm that performs data encryption and decryption. This is used for security purpose like user authentication where storing the password in Database in the encrypted form. Crypto module provides set of classes like hash, HMAC, cipher, decipher, sign, and verify.</div>"
    },
    {
      "question": "Explain the use of passport module in Node.js?",
      "type": "node",
      "answer": "<div>The passport module is used for adding authentication features to our website or web app. It implements authentication measure which helps to perform sign-in operations.</div>"
    },
    {
      "question": "What is TLS/SSL?",
      "type": "node",
      "answer": "<div>The node:tls module provides an implementation of the Transport Layer Security (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL. The module can be accessed using: </br> const tls = require('node:tls'); </div>"
    },
    {
      "question": "What is redis?",
      "type": "node",
      "answer": "<div className='node-answer'>Redis is very powerful in-memory data-store that we can use in our applications. It is used as a database, cache, and message broker.And also It's very simple to save and get data without much overhead. </br> </br><code> const redis = require('redis'); </br>  const client = redis.createClient(); // By default, host - 127.0.0.1 and port 6379 </br> const client = redis.createClient(port, host); </br> client.on('connect', function() {</br> console.log('Connected!');</br> });</code> </br> </br> <a href = 'https://www.sitepoint.com/using-redis-node-js' target='_blank'> https://www.sitepoint.com/using-redis-node-js/ </a></div>",
      "hindi": ""
    },
    {
      "question": "How to manage sessions in Node.js?",
      "type": "node",
      "answer": "<div className='node-answer'>Session management can be done in node.js by using the express-session module. It helps in saving the data in the key-value form. In this module, the session data is not saved in the cookie itself, just the session ID.</div>",
      "hindi": ""
    },
    {
      "question": "JWT token?",
      "type": "node",
      "answer": "<div>A JSON Web Token (JWT) is an open standard  that securely sends and receives data between client side to server side <ul><li>jwt.sign({data: 'foobar'}, 'secret', { expiresIn: '1h' });</li><li>jwt.verify(token, 'secret', function(err, decoded) { console.log(decoded.foo) // bar });</li></ul></div>"
    },
    {
      "question": "GraphQl?",
      "type": "node",
      "answer": ""
    },
    {
      "question": "What is rest and soap api?",
      "type": "node",
      "answer": "<div><ul>SOAP API <li>SOAP (Simple Object Access Protocol) is a protocol </li><li>Transports data in standard XML format.</li><li>Because it is XML based and relies on SOAP, it works with WSDL</li> <li>Works over HTTP, HTTPS, SMTP, XMPP</li></ul> <ul> REST API<li>REST (Representational State Transfer) is a guideline for architectural style.</li><li>Generally transports data in JSON. It is based on URI. </li><li>It works with GET, POST, PUT, DELETE</li><li>Works over HTTP and HTTPS</li></ul></div>"
    },
    {
      "question": "What is api methods?",
      "type": "node",
      "answer": "GET POST PUT PATCH DELETE"
    },
    {
      "question": "Payment methods?",
      "type": "node",
      "answer": ""
    },
    {
      "question": "What is unit testing and how to work?",
      "type": "node",
      "answer": ""
    },
    {
      "question": "Socket io node js?",
      "type": "node",
      "answer": "<div> Socket.IO is a real-time web application framework for Node.js that enables bidirectional communication between clients and servers. It's used to build interactive and dynamic web applications with features like event-based communication, WebSocket support, rooms, and namespaces. Socket.IO is commonly used for chat applications, online gaming, and other real-time applications where instant data exchange is essential. </div>"
    },
    {
      "question": "How to work node js?",
      "type": "node",
      "answer": " <div className='node-answer'>As we all know. Node js is single thread.  node js executes all operations on a single thread, but using a few smart data structures, it gives us the illusion of multi-threading. <p>Node.js basically works on two concept</p><ul><li>Asynchronous</li><li>Non-blocking I/O</li></ul><p><strong>Non-blocking I/o: </strong>Non-blocking i/o &nbsp;means working with multiple requests without blocking the thread for a single request. I/O basically interacts with external systems such as files, databases. Node.js is not used for CPU-intensive work means for calculations, video processing because a single thread cannot handle the CPU works.</p> <p><strong>Asynchronous: </strong>Asynchronous is executing a callback function. The moment we get the response from the other server or database it will execute a callback function. Callback functions are called as soon as some work is finished and this is because the node.js uses an event-driven architecture. The single thread doesn‚Äôt work with the request instead it sends the request to another system which resolves the request and it is accessible for another request.</p> <p>To implement the concept of the system to handle the request &nbsp;node.js uses the concept of Libuv.</p><p>Libuv is an open-source library built-in C. It has a strong focus on asynchronous and &nbsp;I/O, this gives node access to the underlying computer operating system, file system, and networking.</p><p>Libuv implements two extremely important features of node.js &nbsp;</p><ul><li>Event loop</li><li>Thread pool</li></ul> <p><strong>Event loop: </strong>The event loop contains a single thread and is responsible for handling easy tasks like executing callbacks and network I/O. When the program is to initialize all the top-level code is executed, the code is not in the callback function. All the applications code that is inside callback functions will run in the event loop. EventLoop is the heart of node.js. When we start our node application the event loop starts running right away. Most of the work is done in the event loop.</p> <p>Nodejs use event-driven-architecture.</p> <ul><li>Events are emitted.</li><li>Event loop picks them up.</li><li>Callbacks are called.</li></ul> <p><strong>Event queue: </strong>As soon as the request is sent the thread places the request into a queue. It is known as an event queue. The process like app receiving HTTP request or server or a timer will emit event as soon as they are done with the work and event loop will pick up these events and call the callback functions that are associated with each event and response is sent to the client.&nbsp;</p> <p>The event loop is an indefinite loop that continuously receives the request and processes them. It checks the queue and waits for the incoming request indefinitely.</p> <p><strong>Thread pool: </strong>Though node.js is single-threaded it internally maintains a thread pool. When non-blocking requests are accepted there are processed in an event loop, but while accepting blocking requests it checks for available threads in a thread pool, assigns a thread to the client‚Äôs request which is then processed and send back to the event loop, and response is sent to the respective client.</p></div>"
    },
    {
      "question": "What is error handeller in node js?",
      "type": "node",
      "answer": "<div> <span> NodeJS provides various mechanisms for handling errors, including try/catch blocks, error events, and error-first callbacks.</span> </br><strong>Try/Catch Blocks:</strong> We can handle synchronous errors using try catch block </br><strong>Error Events:</strong> Using on error event notify asynchronously errors </br><strong>Error-First Callbacks:</strong>NodeJS follows the convention of ‚Äúerror-first callbacks,‚Äù where callback functions receive an error object as the first argument.</br><strong>Promises:</strong>When using promises in NodeJS, developers can use the .catch() method to handle errors asynchronously. Promises allow for more concise and readable error handling compared to callback-based approaches.</div>"
    },
    {
      "question": "What is debounced?",
      "type": "react",
      "answer": "Debouncing is a technique used to delay a network request until a certain amount of idle time has passed. This is particularly useful for reducing the number of requests sent to a server for example we have create search"
    },
    {
      "question": "What is state?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "What is propes and State?",
      "type": "react",
      "answer": "<b>State in React:<b><p>A state is a variable that exists inside a component, that cannot be accessed and modified outside the component, and can only be used inside the component. Works very similarly to a variable that is declared inside a function that cannot be accessed outside the scope of the function in normal javascript. State Can be modified using this.setState. The state can be asynchronous. Whenever this.setState is used to change the state class is rerender itself. Let‚Äôs see with the help of an example:</p> <b>Props in React:<b><p>React allows us to pass information to a Component using something called props (which stands for properties). Props are objects which can be used inside a component. Sometimes we need to change the content inside a component. Props come to play in these cases, as they are passed into the component and the user..<p> <table class='GFGEditorTheme__table'> <colgroup> <col> <col></colgroup> <thead> <tr> <th class=' ' style='width: 350px;'> <p dir='' style='text-align: center;'><b><strong>PROPS</strong></b></p> </th> <th class=' ' style='width: 350px;'> <p dir='' style='text-align: center;'><b><strong>STATE</strong></b></p> </th> </tr> </thead> <tbody> <tr> <td class='' style='width: 350px;'><span>The Data is passed from one component to another.</span></td> <td class='' style='width: 350px;'><span>The Data is passed within the component only.</span></td> </tr> <tr> <td class='' style='width: 350px;'><span>It is Immutable (cannot be modified).</span></td> <td class='' style='width: 350px;'><span>It is Mutable ( can be modified).</span></td> </tr> <tr> <td class='' style='width: 350px;'><span>Props can be used with state and functional components.</span></td> <td class='' style='width: 350px;'><span>The state can be used only with the state components/class component (Before 16.0).</span></td> </tr> <tr> <td class='' style='width: 350px;'><span>Props are read-only.</span></td> <td class='' style='width: 350px;'><span>The state is both read and write.</span></td> </tr> </tbody> </table>"
    },
    {
      "question": "Life cycle in react js?",
      "type": "react",
      "answer": "<ul> <li>Initial Phase <ul> <li>getDefaultProps()</li> <li>getInitialState()</li> </ul> </li> <li>Mounting Phase <ul> <li> componentWillMount() </li> <li> componentDidMount() </li> <li> render() </li> </ul> </li> <li>Updating Phase <ul> <li> componentWillRecieveProps() </li> <li> componentWillUpdate() </li> <li> render() </li> <li> componentDidUpdate() </li> </ul> </li> <li>Unmounting Phase <ul> <li> componentWillUnmount() </li> </ul> </li> </ul>"
    },
    {
      "question": "Hooks in react?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Class component?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Function component?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Class component and function component?",
      "type": "react",
      "answer": "<div><table class=''> <colgroup> <col> <col> </colgroup> <tbody> <tr> <th class='' ><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><strong> &nbsp;</strong><a href='https://www.geeksforgeeks.org/reactjs-functional-components/' rel='noopener'><strong>Functional Components</strong></a><strong> &nbsp; &nbsp;&nbsp;</strong><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></th> <th class=''><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><strong> </strong><a href='https://www.geeksforgeeks.org/reactjs-class-based-components/' rel='noopener'><strong>Class Components</strong></a><strong> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong></th> </tr> <tr> <td class=''><span>A functional component is just a plain JavaScript pure function that accepts props as an argument and returns a React element(JSX).</span></td> <td class=''><span>A class component requires you to extend from React. Component and create a render function that returns a React element.</span></td> </tr> <tr> <td class=''><span>There is no render method used in functional components.</span></td> <td class=''><span>It must have the render() method returning JSX (which is syntactically similar to HTML)</span></td> </tr> <tr> <td class=''><span>Functional components run from top to bottom and once the function is returned it can‚Äôt be kept alive.</span></td> <td class=''><span>The class component is instantiated and different life cycle method is kept alive and is run and invoked depending on the phase of the class component.</span></td> </tr> <tr> <td class=''><span>Also known as Stateless components as they simply accept data and display them in some form, they are mainly responsible for rendering UI.</span></td> <td class=''><span>Also known as Stateful components because they implement logic and state.</span></td> </tr> <tr> <td class=''><span>React lifecycle methods (for example, componentDidMount) cannot be used in functional components.</span></td> <td class=''><span>React lifecycle methods can be used inside class components (for example, componentDidMount).</span></td> </tr> <tr> <td class=''> <p><span>Hooks can be easily used in functional components to make them Stateful.</span></p> <p><span>Example: </span></p> <pre><span>const [name,SetName]= React.useState(' ')</span></pre> </td> <td class=''> <p><span>It requires different syntax inside a class component to implement hooks.</span></p> <p><span>Example: </span></p> <pre><span>constructor(props) {</span><br><span>&nbsp; &nbsp;super(props);</span><br><span>&nbsp; &nbsp;this.state = {name: ' '}</span><br><span>}</span></pre> </td> </tr> <tr> <td class=''><span>Constructors are not used.</span></td> <td class=''><span>Constructor is used as it needs to store state.&nbsp;</span></td> </tr> </tbody> </table> </div>"
    },
    {
      "question": "UseEffect?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Real dom and virtule dom and its role?",
      "type": "react",
      "answer": "<div> DOM stands for Document Object Model it is the structural representation of the HTML Document. Real DOM is the actual structure represented in the User Interface while Virtual DOM is the memory representation of the same. <ul> <li value='1'><span>Real DOM is the actual structure of the webpage.</span></li> <li value='2'><span>React Update complete document in the Real DOM.</span></li> <li value='3'><span>React DOM is the actual webpage rendered on the browser any changes made directly reflect on the complete webpage.</span></li></ul> <h2><b><strong>Virtual DOM</strong></b></h2> <ul>  <li value='1'><span>Virtual DOM is the virtual representation of Real DOM</span></li>  <li value='2'><span>React update the state changes in Virtual DOM first and then it syncs with Real DOM</span></li> <li value='3'><span>Virtual DOM is just like a blueprint of a machine, can do changes in the blueprint but those changes will not directly apply to the machine.</span></li> <li value='4'><span>Virtual DOM is a programming concept where a virtual representation of a UI is kept in memory synced with ‚ÄúReal DOM ‚Äù by a library such as ReactDOM and this process is called reconciliation</span></li> <li value='5'><span>Virtual DOM makes the performance faster, not because the processing itself is done in less time. The reason is the amount of changed information ‚Äì rather than wasting time on updating the entire page, you can dissect it into small elements and interactions</span></li>   </ul> </br> <h2><span>&nbsp;Differences between Real Dom and Virtual Dom</span></h2> <table class=''> <colgroup> <col> <col></colgroup> <thead> <tr> <th class=' '> <p dir='ltr' style='text-align: center;'><span>Real DOM</span></p> </th> <th class=' '> <p dir='ltr' style='text-align: center;'><span>Virtual DOM</span></p> </th> </tr> </thead> <tbody> <tr> <td class=''> <p dir='ltr'><span>Real DOM represent actual structure of the webpage.</span></p> </td> <td class=''> <p dir='ltr'><span>Virtual DOM represent the virtual/memory representation of the Webpage.</span></p> </td> </tr> <tr> <td class=''><span>DOM manipulation is very expensive&nbsp;</span></td> <td class=''><span>DOM manipulation is very easy&nbsp;</span></td> </tr> <tr> <td class=''><span>There is too much memory wastage&nbsp;</span></td> <td class=''><span>No memory wastage&nbsp;</span></td> </tr> <tr> <td class=''><span>It updates Slow</span></td> <td class=''><span>It updates fast</span></td> </tr> <tr> <td class=''><span>It can directly update HTML</span></td> <td class=''><span>It can‚Äôt update HTML directly&nbsp;</span></td> </tr> <tr> <td class=''><span>&nbsp;Creates a new DOM if the element updates.</span></td> <td class=''><span>Update the JSX if the element update&nbsp;</span></td> </tr> <tr> <td class=''><span>It allows us to directly target any specific</span><br><span>node (HTML element)</span></td> <td class=''><span>It can produce about 200,000 Virtual DOM</span><br><span>Nodes / Second.</span></td> </tr> <tr> <td class=''><span>It represents the Ul of your application</span></td> <td class=''><span>It is only a virtual representation of the DOM</span></td> </tr> </tbody> </table></div>"
    },
    {
      "question": "Redux in react?",
      "type": "react",
      "answer": "<div className='node-answer'>Redux is a pattern and library for managing and updating application state, using events called `actions`. It serves as a centralized store for state that needs to be used across your entire application, with rules ensuring that the state can only be updated in a predictable fashion.</div>",
      "hindi": ""
    },
    {
      "question": "Router?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Flex box in react?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "HTMl Attributes?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Api Calls?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Axios or fetch?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Context Api?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "How does React handle event handling?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "How we can handle error in react?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "How does React handle component state and props?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "What is JSX?",
      "type": "react",
      "answer": "<div className='node-answer'>JSX stands for Javascript XML and it is a very useful tool for React developers. JSX is an extension of the JavaScript language which provides a way to structure component rendering using syntax similar to HTML. JSX gives us the ability to write HTML elements in Javascript and place them in the DOM by converting the HTML tags into React elements without the need for other methods like createElement() or appendChild().</div>"
    },
    {
      "question": "How do you optimize the performance of a React application??",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Explain ‚Äúcontrolled‚Äù and ‚Äúuncontrolled‚Äù components.",
      "type": "react",
      "answer": ""
    },
    {
      "question": "What are React Hooks? Give an example of a Hook you have used ‚Äòand explain its purpose.",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Explain the difference between server-side. rendering and client-side rendering in React.?",
      "type": "react",
      "answer": "<div> <strong> Server-Side Rendering </strong> <p> Server-side rendering (SSR) is the process of rendering web pages on the server and sending the fully-rendered HTML to the client. In this approach, the server generates the HTML, including any dynamic data, and sends it to the client as a complete page. The client then displays the page without any further processing. </br> One example of a popular SSR framework is Next.js. With Next.js, you can write React code and have it automatically rendered on the server, providing the benefits of SSR without having to manage the server yourself.</p> <p><strong>Advantages:</strong></p> <ul> <li>Faster initial load times</li> <li>Improved SEO optimization</li> <li>Can provide a better user experience for users with slower internet connections or less powerful devices</li> </ul> <p><strong>Disadvantages:</strong></p> <ul> <li>Can require more server resources and maintenance</li> <li>This can result in slower subsequent page loads if the client needs to make additional server requests</li> </ul> <p><strong>Working of SSR: </strong>When a user requests a page, the server generates the HTML for that page, including any dynamic data. The fully-rendered HTML is then sent to the client, which can display the page without any further processing.</p> <strong> Client-Side Rendering </strong> <p>Client-side rendering (CSR) is the process of rendering web pages on the client using JavaScript. In this approach, the server sends the initial HTML file, but the client then uses JavaScript to dynamically update the page as needed. This allows for more interactive and responsive web pages, as the client can update specific parts of the page without needing to reload the entire page.</p> <p>One example of a popular CSR framework is React. With React, you can write JavaScript code that updates the DOM as needed, providing a more interactive and dynamic web application.</p> <p><strong>Advantages:</strong></p> <ul> <li>More dynamic and interactive web applications</li> <li>Can provide a smoother and more seamless user experience</li> <li>Can reduce the need for additional server requests</li> </ul> <p><strong>Disadvantages:</strong></p> <ul> <li>Slower initial load times</li> <li>Can be less SEO-friendly, as search engines may have difficulty indexing client-rendered content</li> </ul> <p><strong>Working of CSR: </strong>When a user requests a page, the server sends the initial HTML file, along with any required JavaScript files. The client then uses JavaScript to update the page as needed, without needing to reload the entire page.</p> "
    },
    {
      "question": "Explain how React handles server-side rendering (SSR)?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "How to Overcoming Props drilling?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Explain the Higher Order Components (Hoc) concept in React.?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Explain UseEffect(), UseCallback() & UseMemo(). What are the differences?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Explain how React handles forms and form validation.?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Explain how React handles server-side rendering with a Node.js backend?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "Have you ever worked with GraphQL in a React project? If so, give an example of a query or mutation you have implemented?",
      "type": "react",
      "answer": ""
    },
    {
      "question": "New",
      "type": "react",
      "answer": ""
    },
    {
      "question": "SQL insert query?",
      "type": "sql",
      "answer": "INSERT INTO Customers (CustomerName, ContactName, Address) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21');"
    },
    {
      "question": "SQL select query?",
      "type": "sql",
      "answer": "SELECT * FROM Customers; <br> SELECT * FROM Customers WHERE Country = 'Germany' AND City = 'Berlin'; <br> SELECT * FROM Customers WHERE City = 'Berlin' OR City = 'Stuttgart'; <br> SELECT * FROM Customers WHERE NOT Country = 'Germany'; <br> <br> SELECT * FROM Customers WHERE Country = 'Germany' AND (City = 'Berlin' OR City = 'Stuttgart'); <br> <br> SELECT * FROM Customers WHERE NOT Country = 'Germany' AND NOT Country = 'USA';"
    },
    {
      "question": "SQL order by query?",
      "type": "sql",
      "answer": "SELECT * FROM Customers ORDER BY Country DESC; <br> SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;"
    },
    {
      "question": "SQL NULL or NOT NULL by query?",
      "type": "sql",
      "answer": "SELECT CustomerName, ContactName, Address   FROM Customers  WHERE Address IS NULL; <br> SELECT CustomerName, ContactName, Address  FROM Customers WHERE Address IS NOT NULL;"
    },
    {
      "question": "SQL select query?",
      "type": "sql",
      "answer": "SELECT DISTINCT Country FROM Customers;"
    },
    {
      "question": "SQL limit and offset query?",
      "type": "sql",
      "answer": "SELECT * FROM Customers LIMIT 3 OFFSET 3;"
    },
    {
      "question": "SQL Min MAX query?",
      "type": "sql",
      "answer": "SELECT MIN(Price) AS SmallestPrice FROM Products; <br> SELECT MAX(Price) AS SmallestPrice   FROM Products;"
    },
    {
      "question": "SQL Min MAX query?",
      "type": "sql",
      "answer": "SELECT MIN(Price) AS SmallestPrice FROM Products; <br> SELECT MAX(Price) AS SmallestPrice   FROM Products;"
    },
    {
      "question": "SQL SUM AVG query?",
      "type": "sql",
      "answer": "SELECT AVG(Price) FROM Products; <br> SELECT COUNT(ProductID) FROM Products; <br> SELECT SUM(Quantity) FROM OrderDetails;"
    },
    {
      "question": "SQL Group By query?",
      "type": "sql",
      "answer": "SELECT COUNT(CustomerID), Country  FROM Customers GROUP BY Country  ORDER BY COUNT(CustomerID) DESC;"
    },
    {
      "question": "SQL Having By query?",
      "type": "sql",
      "answer": "SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country  HAVING COUNT(CustomerID) > 5;"
    },
    {
      "question": "SQL select query?",
      "type": "sql",
      "answer": "<table class=> <tbody><tr> <th style='width:20%'>Operator</th> <th style='width:70%'>Description</th> </tr> <tr> <td>=</td> <td>Equal</td> </tr> <tr> <td>&gt;</td> <td>Greater than</td> </tr> <tr> <td>&lt;</td> <td>Less than</td> </tr> <tr> <td>&gt;=</td> <td>Greater than or equal</td> </tr> <tr> <td>&lt;=</td> <td>Less than or equal</td> </tr> <tr> <td>&lt;&gt;</td> <td>Not equal. <b>Note:</b> In some versions of SQL this operator may be written as !=</td> </tr> <tr> <td>BETWEEN</td> <td>Between a certain range</td> </tr> <tr> <td>LIKE</td> <td>Search for a pattern</td> </tr> <tr> <td>IN</td> <td>To specify multiple possible values for a column</td> </tr> </tbody></table>"
    },
    {
      "question": "SQL delete query?",
      "type": "sql",
      "answer": "Delete Customers WHERE CustomerID = 1;"
    },
    {
      "question": "SQL update query?",
      "type": "sql",
      "answer": "UPDATE Customers SET ContactName = 'Alfred Schmidt', City = 'Frankfurt' WHERE CustomerID = 1;"
    },
    {
      "question": "SQL query to find second highest salary?",
      "type": "sql",
      "answer": "<div className='sql-box'><div className='sql-query'>select * from employee group by salary order by salary desc limit 1,1; </div></br><div className='sql-query'>SELECT name, MAX(salary) AS salary FROM employee WHERE salary IN (SELECT salary FROM employee MINUS SELECT MAX(salary) FROM employee);</div></div>"
    },
    {
      "question": "Implementing multi-level trees menu in SQL Server?",
      "type": "sql",
      "answer": "<div className='sql-box'><div className='sql-query'> CREATE TABLE menu_items ( id INT PRIMARY KEY, name NVARCHAR(50) NOT NULL, parent_id INT NULL, CONSTRAINT fk_menu_items_parent FOREIGN KEY (parent_id) REFERENCES menu_items(id) ); </div> <br> <div className='sql-query'> WITH menu_cte AS ( SELECT id, name, parent_id, 0 AS level FROM menu_items WHERE parent_id IS NULL UNION ALL SELECT mi.id, mi.name, mi.parent_id, level + 1 FROM menu_items mi INNER JOIN menu_cte mcte ON mi.parent_id = mcte.id ) SELECT id, name, parent_id, level FROM menu_cte ORDER BY level, name; </div></div>"
    },
    {
      "question": "SQL query to find gretter then 2?",
      "type": "sql",
      "answer": "<div className='sql-box'> SELECT c.id, c.name, o.title, COUNT(o.customer_id) as total  FROM `customer`  as c LEFT JOIN orders as o ON c.id = o.customer_id GROUP BY o.customer_id HAVING total > 1 </div>"
    },
    {
      "question": "SQL How to replace values of select return?",
      "type": "sql",
      "answer": "<div className='sql-box'>SELECT CASE status WHEN 'VS' THEN 'validated by subsidiary' WHEN 'NA' THEN 'not acceptable' WHEN 'D'  THEN 'delisted' ELSE 'validated' END AS STATUS  FROM SUPP_STATUS </br> </br> SELECT CASE WHEN hide = 0 THEN 'false' ELSE 'true' END FROM</div>"
    },
    {
      "question": "SQL query to find second highest salary?",
      "type": "sql",
      "answer": "<div className='sql-box'>Please write the mail for cancel my interview because i am not available. Beacuse my BA and TL plan to discuss new module on tomorrow morning  </div>"
    },
    {
      "question": "Test",
      "type": "sql",
      "answer": ""
    }
  ]